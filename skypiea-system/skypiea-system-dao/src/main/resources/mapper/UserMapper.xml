<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.skypiea.system.mapper.UserMapper">

    <!--通过ID查找用户-->
    <select id="getUserById" parameterType="int" resultType="UserInfo">
        SELECT * FROM t_user WHERE id=#{id};
    </select>

    <!--通过用户名查找用户-->
    <select id="getUserByName" parameterType="String" resultType="UserInfo">
        SELECT * FROM t_user WHERE  username=#{username};
    </select>

    <resultMap id="UsersAndRolesRstMap" type="UserInfo">
        <id column="id" property="id"></id>
        <result column="username" property="username"></result>
        <result column="password" property="password"></result>
        <association property="role" javaType="RoleInfo">
            <id column="role_id" property="id"></id>
            <result column="role_name" property="name"></result>
        </association>
    </resultMap>

    <!--查找所有用户(包括用户对应的角色,后续还可以扩展)-->
    <select id="getAllUsers" resultMap="UsersAndRolesRstMap">
        SELECT
            t_user.id,
            t_user.username,
            t_user.password,
            t_role.id role_id,
            t_role.name role_name
        FROM
            t_user,
            t_role,
            t_user_role
        WHERE
            t_user_role.user_id = t_user.id
        AND t_user_role.role_id = t_role.id
        ORDER BY t_user.id
    </select>

    <!--查询用户数量-->
    <select id="getUserCount" resultType="int">
        SELECT count(*) FROM t_user;
    </select>

    <!--通过用户名查找密码-->
    <select id="getPasswordByUsername" parameterType="String" resultType="String">
        SELECT password FROM t_user WHERE username=#{username};
    </select>

    <!--通过用户id查询用户角色-->
    <select id="getRolesByUserId" parameterType="int" resultType="RoleInfo">
        SELECT
	        t_role.id, t_role.name
        FROM
	        t_role
        WHERE
            id IN (
                SELECT
                    t_user_role.role_id
                FROM
                    t_user
                INNER JOIN t_user_role ON t_user_role.user_id = t_user.id
                WHERE
                    t_user.id = #{id}
            );
    </select>

    <!--通过用户名查询用户角色-->
    <select id="getRolesByUsername" parameterType="String" resultType="RoleInfo">
        SELECT
	        t_role.id, t_role.name
        FROM
	        t_role
        WHERE
            id IN (
                SELECT
                    t_user_role.role_id
                FROM
                    t_user
                INNER JOIN t_user_role ON t_user_role.username = t_user.username
                WHERE
                    t_user.username = #{username}
            );
    </select>

    <!--添加用户-->
    <insert id="addUser" parameterType="UserInfo">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID();
        </selectKey>
        INSERT INTO t_user(username,password) VALUES(#{username},#{password});
    </insert>

    <!--往t_user_role中添加用户对应的角色-->
    <insert id="addUserRole" parameterType="UserInfo">
        INSERT INTO t_user_role(user_id,role_id,username) VALUES(#{id},#{role.id},#{username});
    </insert>

    <!--更新用户-->
    <update id="updateUser" parameterType="UserInfo">
        UPDATE t_user SET password=#{password} WHERE username=#{username};
    </update>

    <!--更新用户关系表-->
    <update id="updateUserRole" parameterType="UserInfo">
        UPDATE t_user_role SET role_id=#{role.id} WHERE username=#{username};
    </update>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="String">
        DELETE FROM t_user WHERE username=#{username};
    </delete>

</mapper>

